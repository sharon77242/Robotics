#include "WaypointManager.h"

using namespace std;

WaypointManager::WaypointManager(const HamsterAPI::OccupancyGrid& inflatedGrid)
: inflatedGrid_(inflatedGrid)
{}

vector<Node*> WaypointManager::GetWaypoints(vector<Node*> path)
{
	int startNodeIndex = 0;
	vector<Node*>  waypoints;
	bool isDone = false;
	int pathGoalIndex = path.size() - 1;
	if(path[startNodeIndex] != nullptr)
		waypoints.push_back(new Node(*(path[startNodeIndex])));
	do
	{
		int nextWaypointIndex = getNextWaypoint(path, startNodeIndex);
		if (nextWaypointIndex == -1)
		{
			cout << "Did not find a next waypoint for start = " << startNodeIndex << " index" << endl;
			waypoints.clear();
			return waypoints;
		}
		else
		{
			int nextWayPointCol = (path[nextWaypointIndex])->location.Y(); // TODO : look if currect x y
			int nextWayPointRow = (path[nextWaypointIndex])->location.X();
			waypoints.push_back(new Node(Position(nextWayPointRow, nextWayPointCol), path[nextWaypointIndex]->type));
			startNodeIndex = nextWaypointIndex;

			if (pathGoalIndex == nextWaypointIndex)
				isDone = true;
		}
	}
	while(!isDone);

	return waypoints;
}

int WaypointManager::getNextWaypoint(vector<Node*> path, int startNodeIndex)
{
<<<<<<< HEAD
	bool isClear = true;
	float shipua = (float) ((ySecond - yFirst)) / (xSecond - xFirst);
	for (double i = smallX; (i < bigX && isClear); i += 0.6)
=======
	int nextWaypoint = -1;
	Node* targetNode;
	Node* startNode = path[startNodeIndex];

	for (unsigned int i = startNodeIndex; i < path.size() - 1; i++)
>>>>>>> 37c5d0c... New way to calculate waypoints (optional)
	{
		int targetNodeIndex = i + 1;
		targetNode = path[targetNodeIndex];
		Node end(Position(targetNode->location.X(), targetNode->location.Y()), targetNode->type);
		if(raytraceWillCollide(startNode, &end))
		{
			break;
		}
		nextWaypoint = targetNodeIndex;
	}

	return nextWaypoint;
}

bool WaypointManager::raytraceWillCollide(Node* start, Node* end)
{
    int dx = fabs(end->location.X() - start->location.X());
    int dy = fabs(end->location.Y() - start->location.Y());
    int x = start->location.X();
    int y = start->location.Y();
    int n = 1 + dx + dy;
    int x_inc = (end->location.X() > start->location.X()) ? 1 : -1;
    int y_inc = (end->location.Y() > start->location.Y()) ? 1 : -1;
    int error = dx - dy;
    //dx *= 2;
    //dy *= 2;

    for (; n > 0; --n)
    {
    	if(inflatedGrid_.getCell(y,x) != HamsterAPI::CELL_FREE)
    	{
    		return true;
    	}
    	// Continue raytrace
        if (error > 0)
        {
            x += x_inc;
            error -= dy;
        }
        else
        {
            y += y_inc;
            error += dx;
        }
    }

    return false;
}
